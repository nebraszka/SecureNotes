<div class="password-strength-meter">
    @if (!string.IsNullOrWhiteSpace(Password))
    {
        <div class="strength-bar" style="background-color: @GetStrengthColor();"></div>
        <div class="strength-meter-text">Siła hasła: @GetStrengthLevel()</div>
        <div class="password-suggestions">
        @foreach (var suggestion in GetPasswordSuggestions(Password))
            {
                <div>@suggestion</div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string Password { get; set; }

    private string GetStrengthLevel()
    {
        int score = CalculatePasswordStrength(Password);
        if (score < 2) return "Słabe";
        if (score < 4) return "Średnie";
        return "Silne";
    }

    private string GetStrengthColor()
    {
        int score = CalculatePasswordStrength(Password);
        if (score < 2) return "red";
        if (score < 4) return "orange";
        return "green";
    }

    private int CalculatePasswordStrength(string password)
    {
        int score = 0;
        if (password.Length < 4) score = 0;
        if (password.Length > 8) score++;
        if (password.Any(char.IsDigit)) score++;
        if (password.Any(char.IsUpper)) score++;
        if (password.Any(char.IsLower)) score++;
        if (password.Any(char.IsSymbol)) score++;
        return score;
    }

    private List<string> GetPasswordSuggestions(string password)
    {
        var suggestions = new List<string>();

        if (!password.Any(char.IsUpper))
        {
            suggestions.Add("Dodaj przynajmniej jedną dużą literę");
        }
        if (!password.Any(char.IsLower))
        {
            suggestions.Add("Dodaj przynajmniej jedną małą literę");
        }
        if (!password.Any(char.IsDigit))
        {
            suggestions.Add("Dodaj przynajmniej jedną cyfrę");
        }
        if (!password.Any(c => !char.IsLetterOrDigit(c)))
        {
            suggestions.Add("Dodaj przynajmniej jeden symbol");
        }

        return suggestions;
    }
}
