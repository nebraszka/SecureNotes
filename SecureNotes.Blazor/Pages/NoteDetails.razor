@using SecureNotes.Blazor.Services
@using SecureNotes.API.Models.NoteDtos
@using Markdig
@using Ganss.Xss

@page "/note-content/{noteId:guid}"
@inject INoteService noteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<h3>Szczegóły Notatki</h3>

@if (IsEncrypted)
{
    <p>Notatka jest zaszyfrowana. Wprowadź hasło, aby ją odszyfrować.</p>
    <EditForm Model="@request" OnValidSubmit="DecryptNote">
        <div class="form-group">
            <label for="password">Hasło</label>
            <InputText id="password" class="form-control" @bind-Value="request.Password" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Odszyfruj</button>
            <a class="btn btn-warning ml-2" href="my-notes">Powrót</a>
        </div>
    </EditForm>
}
else if (!loading && noteDetails != null)
{
    <div class="note-details">
    <h4>@noteDetails.Title</h4>
    <div class="note-content">
        @((MarkupString)Markdown.ToHtml(sanitizer.Sanitize(noteDetails.Content)))
    </div>
    <div class="note-metadata">
        <p><em>Utworzono: @noteDetails.CreationDate.ToShortDateString()</em></p>
        <p>Publiczna: @(noteDetails.IsPublic ? "tak" : "nie")</p>
        <p>Zaszyfrowana: @(noteDetails.IsEncrypted ? "tak" : "nie")</p>
    </div>
</div>
    <button class="btn btn-warning" onclick="history.back();">Powrót</button>
}
else
{
    <p>@message</p>
}

<style>
    .note-details {
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 5px;
    }

    .note-content {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .note-metadata p {
        margin: 5px 0;
    }
</style>

@code {
    [Parameter]
    public Guid noteId { get; set; }
    public bool IsEncrypted { get; set; }

    private string returnUrl = "my-notes";

    private GetNoteDetailsRequestDto request = new GetNoteDetailsRequestDto();
    private GetNoteDetailsDto? noteDetails = null!;

    private bool loading = true;

    private string message = "";

    private HtmlSanitizer sanitizer = new HtmlSanitizer();

    protected override async Task OnInitializedAsync()
    {
        IsEncrypted = new Uri(NavigationManager.Uri).Query.Contains("isEncrypted=True");

        if (!IsEncrypted)
        {
            await LoadNoteDetails();
        }
    }

    private async Task DecryptNote()
    {
        IsEncrypted = false;
        await LoadNoteDetails();
    }

    private async Task LoadNoteDetails()
    {
        try
        {
            request.NoteId = noteId;
            var response = await noteService.GetNoteDetails(request);
            if (response.Success)
            {
                noteDetails = response.Data!;
                loading = false;
            }
            else
            {
                if (response != null)
                {
                    message = response.Message!;
                }
                else
                {
                    message = "Wystąpił nieznany błąd.";
                }
            }
        }
        catch
        {
            message = "Wystąpił nieznany błąd.";
        }
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
